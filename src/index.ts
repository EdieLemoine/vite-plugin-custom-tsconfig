import { Plugin } from "vite";
import fs from "fs";
import path from "path";

export interface PluginOptions {
  tsConfigPath?: string;
}

const NAME = "vite-plugin-custom-tsconfig";
const TSCONFIG_PATH = "tsconfig.json";
const BANNER = `// GENERATED BY ${NAME} \n`;
const DELETE_TIP = `Please delete it or remove ${NAME} from your Vite config`;

const resolveFromRoot = (root: string, file: string) => {
  return path.resolve(root, file);
};

const tsConfigHasBanner = (tsconfig: string) => {
  const tsconfigContent = fs.readFileSync(tsconfig, "utf8");

  return tsconfigContent.startsWith(BANNER.trim());
};

const customTsConfigPlugin = (options?: PluginOptions): Plugin => {
  let root: string;

  const resolvedOptions: Required<PluginOptions> = {
    tsConfigPath: "tsconfig.build.json",
    ...options,
  };

  return {
    name: NAME,

    config(config) {
      root ??= config.root ?? process.cwd();

      const tsconfig = resolveFromRoot(root, TSCONFIG_PATH);

      if (fs.existsSync(tsconfig) && !tsConfigHasBanner(tsconfig)) {
        throw new Error(`${TSCONFIG_PATH} already exists. ${DELETE_TIP}`);
      }

      const customTsConfig = resolveFromRoot(
        root,
        resolvedOptions.tsConfigPath
      );

      if (!fs.existsSync(customTsConfig)) {
        throw new Error(`${resolvedOptions.tsConfigPath} does not exist.`);
      }

      const customTsConfigContent = fs.readFileSync(customTsConfig, "utf8");

      fs.writeFileSync(tsconfig, BANNER + customTsConfigContent);
    },

    closeBundle() {
      const tsconfig = resolveFromRoot(root, TSCONFIG_PATH);

      if (!fs.existsSync(tsconfig)) {
        return;
      }

      if (!tsConfigHasBanner(tsconfig)) {
        throw new Error(
          `${TSCONFIG_PATH} does not contain the expected banner. ${DELETE_TIP}`
        );
      }

      fs.rmSync(tsconfig);
    },
  };
};

export default customTsConfigPlugin;
